#!/bin/bash

# Redirect STDOUT to STDERR, only STDERR is relayed by the cf cli
exec 1>&2

# The java offline buildpack has a `resources/cache` dir while the
# rest have a `dependencies` one.
#
# ATTENTION, the `dependencies` directory is expected to be in the
# toplevel directory of the buildpack. Not deeper in the hierarchy.
#
# This means that a directory like
# `vendor/bundle/ruby/2.6.0/gems/activesupport-4.2.11.1/lib/active_support/dependencies`
# as found in the online PHP buildpack does NOT count.
#
# This is achieved using `-maxdepth 3` to limit the traversal depth.
# Note that while depth 2 is good enough to detect `dependencies`,
# path `resources/cache` requires depth 3. If this leads to
# misdetections for `dependencies` in the children of the BP toplevels
# we will have to split the `find` command into two. For now we do not
# care.

LOCATION="/tmp/buildpacks"

report() {
    buildpack="${1}"
    echo "### Buildpack cache detection: ERROR: found cached dependencies in ${buildpack}"
    case "${buildpack}" in
	*/cache)
	    language="language: java"
	    ;;
	*)
	    buildpack_dir="$(dirname ${buildpack})"
	    language="$(grep language ${buildpack_dir}/manifest.yml)"
	    ;;
    esac
    echo "### Buildpack cache detection: ${language}"
}

offenders="$(find "${LOCATION}" -maxdepth 3 -type d -path '*/resources/cache' -o -name dependencies)"

if [[ -n "${offenders}" ]]; then
    for buildpack in ${offenders}; do
	report "${buildpack}"
    done
    exit 1
else
    echo "### Buildpack cache detection: No cached dependencies found"
    exit 0 # Indicate that the buildpacks are fine by accepting the app
fi
